{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3","program":"C:\\Users\\Home\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","embedded_hal","C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=50c8e1a1703ceba7","-C","extra-filename=-50c8e1a1703ceba7","--out-dir","c:\\Users\\Home\\Desktop\\Programming\\Rust-Programs\\button\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Home\\Desktop\\Programming\\Rust-Programs\\button\\target\\rls\\debug\\deps","--extern","nb=c:\\Users\\Home\\Desktop\\Programming\\Rust-Programs\\button\\target\\rls\\debug\\deps\\libnb-d9ddfb45ec4db079.rmeta","--extern","void=c:\\Users\\Home\\Desktop\\Programming\\Rust-Programs\\button\\target\\rls\\debug\\deps\\libvoid-54d51f5fb6276df6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Home\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Home\\Desktop\\Programming\\Rust-Programs\\button\\target\\rls\\debug\\deps\\libembedded_hal-50c8e1a1703ceba7.rmeta"},"prelude":{"crate_id":{"name":"embedded_hal","disambiguator":[1382800931155815963,11255916885090641660]},"crate_root":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src","external_crates":[{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[14625317234859803032,6791610349458793748]}},{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13367216100517456726,18240828775391475830]}},{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5927333369983577022,15909913472650230380]}},{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","num":4,"id":{"name":"nb","disambiguator":[10072060191929222329,14704472974877163773]}},{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","num":5,"id":{"name":"void","disambiguator":[1868330106631494553,5397044270156392425]}}],"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":0,"byte_end":29397,"line_start":1,"line_end":995,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43914,"byte_end":43915,"line_start":24,"line_end":24,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"OutputPin","parent":{"krate":0,"index":68}},{"kind":"Use","ref_id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62429,"byte_end":62436,"line_start":8,"line_end":8,"column_start":26,"column_end":33},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62440,"byte_end":62476,"line_start":8,"line_end":8,"column_start":37,"column_end":73},"name":"_embedded_hal_blocking_delay_DelayMs","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62503,"byte_end":62510,"line_start":9,"line_end":9,"column_start":26,"column_end":33},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62514,"byte_end":62550,"line_start":9,"line_end":9,"column_start":37,"column_end":73},"name":"_embedded_hal_blocking_delay_DelayUs","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62581,"byte_end":62585,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62589,"byte_end":62620,"line_start":11,"line_end":11,"column_start":13,"column_end":44},"name":"_embedded_hal_blocking_i2c_Read","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62622,"byte_end":62627,"line_start":11,"line_end":11,"column_start":46,"column_end":51},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62631,"byte_end":62663,"line_start":11,"line_end":11,"column_start":55,"column_end":87},"name":"_embedded_hal_blocking_i2c_Write","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62669,"byte_end":62678,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62682,"byte_end":62718,"line_start":12,"line_end":12,"column_start":18,"column_end":54},"name":"_embedded_hal_blocking_i2c_WriteRead","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62842,"byte_end":62847,"line_start":16,"line_end":16,"column_start":27,"column_end":32},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62851,"byte_end":62886,"line_start":16,"line_end":16,"column_start":36,"column_end":71},"name":"_embedded_hal_blocking_serial_Write","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62917,"byte_end":62925,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62929,"byte_end":62964,"line_start":18,"line_end":18,"column_start":17,"column_end":52},"name":"_embedded_hal_blocking_spi_Transfer","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62966,"byte_end":62971,"line_start":18,"line_end":18,"column_start":54,"column_end":59},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":62975,"byte_end":63007,"line_start":18,"line_end":18,"column_start":63,"column_end":95},"name":"_embedded_hal_blocking_spi_Write","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63161,"byte_end":63170,"line_start":24,"line_end":24,"column_start":18,"column_end":27},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63174,"byte_end":63205,"line_start":24,"line_end":24,"column_start":31,"column_end":62},"name":"_embedded_hal_digital_OutputPin","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63356,"byte_end":63360,"line_start":28,"line_end":28,"column_start":17,"column_end":21},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63364,"byte_end":63389,"line_start":28,"line_end":28,"column_start":25,"column_end":50},"name":"_embedded_hal_serial_Read","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63407,"byte_end":63412,"line_start":29,"line_end":29,"column_start":17,"column_end":22},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63416,"byte_end":63442,"line_start":29,"line_end":29,"column_start":26,"column_end":52},"name":"_embedded_hal_serial_Write","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63457,"byte_end":63467,"line_start":30,"line_end":30,"column_start":14,"column_end":24},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63471,"byte_end":63499,"line_start":30,"line_end":30,"column_start":28,"column_end":56},"name":"_embedded_hal_spi_FullDuplex","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63516,"byte_end":63525,"line_start":31,"line_end":31,"column_start":16,"column_end":25},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":63529,"byte_end":63558,"line_start":31,"line_end":31,"column_start":29,"column_end":58},"name":"_embedded_hal_timer_CountDown","value":"","parent":{"krate":0,"index":115}},{"kind":"Use","ref_id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":64004,"byte_end":64010,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"alias_span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":64014,"byte_end":64034,"line_start":42,"line_end":42,"column_start":19,"column_end":39},"name":"_embedded_hal_PwmPin","value":"","parent":{"krate":0,"index":115}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":0,"byte_end":29397,"line_start":1,"line_end":995,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":68},{"krate":0,"index":106},{"krate":0,"index":115},{"krate":0,"index":132},{"krate":0,"index":143},{"krate":0,"index":154},{"krate":0,"index":166},{"krate":0,"index":167}],"decl_id":null,"docs":" A Hardware Abstraction Layer (HAL) for embedded systems","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20504,"byte_end":20526,"line_start":685,"line_end":685,"column_start":1,"column_end":23}},{"value":"deny(warnings)","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20527,"byte_end":20545,"line_start":686,"line_end":686,"column_start":1,"column_end":19}},{"value":"no_std","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20546,"byte_end":20556,"line_start":687,"line_end":687,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\adc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adc","qualname":"::adc","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\adc.rs","parent":null,"children":[],"decl_id":null,"docs":" Analog-digital conversion traits\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"blocking","qualname":"::blocking","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":15},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":41}],"decl_id":null,"docs":" Blocking API","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"delay","qualname":"::blocking::delay","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":12}],"decl_id":null,"docs":" Delays","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","byte_start":34083,"byte_end":34090,"line_start":14,"line_end":14,"column_start":11,"column_end":18},"name":"DelayMs","qualname":"::blocking::delay::DelayMs","value":"DelayMs<UXX>","parent":null,"children":[{"krate":0,"index":11}],"decl_id":null,"docs":" Millisecond delay","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","byte_start":34152,"byte_end":34160,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"delay_ms","qualname":"::blocking::delay::DelayMs::delay_ms","value":"fn (&mut self, ms: UXX) -> ()","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Pauses execution for `ms` milliseconds\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","byte_start":34377,"byte_end":34384,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"DelayUs","qualname":"::blocking::delay::DelayUs","value":"DelayUs<UXX>","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" Microsecond delay","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\delay.rs","byte_start":34446,"byte_end":34454,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"delay_us","qualname":"::blocking::delay::DelayUs::delay_us","value":"fn (&mut self, us: UXX) -> ()","parent":{"krate":0,"index":12},"children":[],"decl_id":null,"docs":" Pauses execution for `us` microseconds\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i2c","qualname":"::blocking::i2c","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","parent":null,"children":[{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22}],"decl_id":null,"docs":" Blocking I2C API","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":34760,"byte_end":34764,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::blocking::i2c::Read","value":"Read","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18}],"decl_id":null,"docs":" Blocking read\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":34795,"byte_end":34800,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Read::Error","value":"type Error;","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":35380,"byte_end":35384,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"read","qualname":"::blocking::i2c::Read::read","value":"fn (&mut self, address: u8, buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":16},"children":[],"decl_id":null,"docs":" Reads enough bytes from slave with `address` to fill `buffer`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":35488,"byte_end":35493,"line_start":35,"line_end":35,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::i2c::Write","value":"Write","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":35524,"byte_end":35529,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::Write::Error","value":"type Error;","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":36013,"byte_end":36018,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::i2c::Write::write","value":"fn (&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":19},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr`","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":36490,"byte_end":36499,"line_start":75,"line_end":75,"column_start":11,"column_end":20},"name":"WriteRead","qualname":"::blocking::i2c::WriteRead","value":"WriteRead","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Blocking write + read\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":36530,"byte_end":36535,"line_start":77,"line_end":77,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::i2c::WriteRead::Error","value":"type Error;","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\i2c.rs","byte_start":37415,"byte_end":37425,"line_start":101,"line_end":101,"column_start":8,"column_end":18},"name":"write_read","qualname":"::blocking::i2c::WriteRead::write_read","value":"fn (&mut self, address: u8, bytes: &[u8], buffer: &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Sends bytes to slave with address `addr` and then reads enough bytes to fill `buffer` *in a\n single transaction*","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\rng.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rng","qualname":"::blocking::rng","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\rng.rs","parent":null,"children":[],"decl_id":null,"docs":" Blocking hardware random number generator\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::blocking::serial","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":32}],"decl_id":null,"docs":" Blocking serial API\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":38914,"byte_end":38919,"line_start":4,"line_end":4,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" Write half of a serial interface (blocking variant)\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":38991,"byte_end":38996,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" The type of error that can occur when writing\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":39433,"byte_end":39443,"line_start":16,"line_end":16,"column_start":8,"column_end":18},"name":"bwrite_all","qualname":"::blocking::serial::Write::bwrite_all","value":"fn (&mut self, buffer: &[Word]) -> Result<(), Self::Error>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a slice, blocking until everything has been written","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":39577,"byte_end":39583,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"bflush","qualname":"::blocking::serial::Write::bflush","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Block until the serial interface has sent all buffered words\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":39660,"byte_end":39665,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::serial::write","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35}],"decl_id":null,"docs":" Blocking serial write\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":40097,"byte_end":40104,"line_start":32,"line_end":32,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::serial::write::Default","value":"Default<Word>: ::serial::Write<Word>","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to opt into default blocking write implementation","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::blocking::spi","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":60}],"decl_id":null,"docs":" Blocking SPI API\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":40682,"byte_end":40690,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Transfer","qualname":"::blocking::spi::Transfer","value":"Transfer<W>","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":40724,"byte_end":40729,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Transfer::Error","value":"type Error;","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":40819,"byte_end":40827,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"transfer","qualname":"::blocking::spi::Transfer::transfer","value":"fn <'w> (&mut self, words: &'w mut [W]) -> Result<&'w [W], Self::Error>","parent":{"krate":0,"index":42},"children":[],"decl_id":null,"docs":" Sends `words` to the slave. Returns the `words` received from the slave\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":40928,"byte_end":40933,"line_start":13,"line_end":13,"column_start":11,"column_end":16},"name":"Write","qualname":"::blocking::spi::Write","value":"Write<W>","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":40967,"byte_end":40972,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Error","qualname":"::blocking::spi::Write::Error","value":"type Error;","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41050,"byte_end":41055,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"write","qualname":"::blocking::spi::Write::write","value":"fn (&mut self, words: &[W]) -> Result<(), Self::Error>","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Sends `words` to the slave, ignoring all the incoming words\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41457,"byte_end":41465,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"transfer","qualname":"::blocking::spi::transfer","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":54}],"decl_id":null,"docs":" Blocking transfer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41594,"byte_end":41601,"line_start":37,"line_end":37,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::transfer::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Transfer<W>` for implementers of\n `spi::FullDuplex<W>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":42078,"byte_end":42083,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"name":"write","qualname":"::blocking::spi::write","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":63}],"decl_id":null,"docs":" Blocking write\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":42201,"byte_end":42208,"line_start":60,"line_end":60,"column_start":15,"column_end":22},"name":"Default","qualname":"::blocking::spi::write::Default","value":"Default<W>: ::spi::FullDuplex<W>","parent":null,"children":[],"decl_id":null,"docs":" Default implementation of `blocking::spi::Write<W>` for implementers of `spi::FullDuplex<W>`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"digital","qualname":"::digital","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":78},{"krate":0,"index":97},{"krate":0,"index":105}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::digital::v1","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[{"value":"deprecated(since = \"0.2.2\", note =\n             \"Deprecated because the methods cannot return errors. \\\n                                      Users should use the traits in digital::v2.\")","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43391,"byte_end":43568,"line_start":7,"line_end":8,"column_start":1,"column_end":85}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","byte_start":44049,"byte_end":44070,"line_start":6,"line_end":6,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","byte_start":44248,"byte_end":44257,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v1::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" Single digital push-pull output pin","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","byte_start":44429,"byte_end":44436,"line_start":18,"line_end":18,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v1::OutputPin::set_low","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1.rs","byte_start":44621,"byte_end":44629,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v1::OutputPin::set_high","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":70},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2","qualname":"::digital::v2","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","parent":null,"children":[{"krate":0,"index":74}],"decl_id":null,"docs":" Digital I/O","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","byte_start":48275,"byte_end":48284,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"OutputPin","qualname":"::digital::v2::OutputPin","value":"OutputPin","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Single digital push-pull output pin\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","byte_start":48315,"byte_end":48320,"line_start":8,"line_end":8,"column_start":10,"column_end":15},"name":"Error","qualname":"::digital::v2::OutputPin::Error","value":"type Error;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Error type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","byte_start":48492,"byte_end":48499,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"set_low","qualname":"::digital::v2::OutputPin::set_low","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Drives the pin low","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2.rs","byte_start":48711,"byte_end":48719,"line_start":20,"line_end":20,"column_start":8,"column_end":16},"name":"set_high","qualname":"::digital::v2::OutputPin::set_high","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Drives the pin high","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1_compat","qualname":"::digital::v1_compat","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":92}],"decl_id":null,"docs":" v1 compatibility wrapper\n this module adds reverse support for v2 digital traits\n v2 traits must be explicitly cast to the v1 version using `.into()`,\n and will panic on internal errors\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52454,"byte_end":52466,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"OldOutputPin","qualname":"::digital::v1_compat::OldOutputPin","value":"OldOutputPin {  }","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" Wrapper to allow fallible `v2::OutputPin` traits to be converted to `v1::OutputPin` traits\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52657,"byte_end":52660,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<OldOutputPin<T>>::new","value":"fn (pin: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new OldOutputPin wrapper around a `v2::OutputPin`\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2_compat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v2_compat","qualname":"::digital::v2_compat","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2_compat.rs","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" v2 compatibility shims\n this module adds implicit forward support to v1 digital traits\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\fmt.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":110}],"decl_id":null,"docs":" Implementation of `core::fmt::Write` for the HAL's `serial::Write`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"decl_id":null,"docs":" The prelude is a collection of all the traits in this crate","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serial","qualname":"::serial","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":138}],"decl_id":null,"docs":" Serial interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64330,"byte_end":64334,"line_start":9,"line_end":9,"column_start":11,"column_end":15},"name":"Read","qualname":"::serial::Read","value":"Read<Word>","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"decl_id":null,"docs":" Read half of a serial interface","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64371,"byte_end":64376,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Read::Error","value":"type Error;","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Read error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64440,"byte_end":64444,"line_start":14,"line_end":14,"column_start":8,"column_end":12},"name":"read","qualname":"::serial::Read::read","value":"fn (&mut self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":134},"children":[],"decl_id":null,"docs":" Reads a single word from the serial interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64540,"byte_end":64545,"line_start":18,"line_end":18,"column_start":11,"column_end":16},"name":"Write","qualname":"::serial::Write","value":"Write<Word>","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142}],"decl_id":null,"docs":" Write half of a serial interface\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64583,"byte_end":64588,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Error","qualname":"::serial::Write::Error","value":"type Error;","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64651,"byte_end":64656,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"write","qualname":"::serial::Write::write","value":"fn (&mut self, word: Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Writes a single word to the serial interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\serial.rs","byte_start":64797,"byte_end":64802,"line_start":26,"line_end":26,"column_start":8,"column_end":13},"name":"flush","qualname":"::serial::Write::flush","value":"fn (&mut self) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":138},"children":[],"decl_id":null,"docs":" Ensures that none of the previously written words are still buffered\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spi","qualname":"::spi","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":174},{"krate":0,"index":186},{"krate":0,"index":185},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":188},{"krate":0,"index":200},{"krate":0,"index":199},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":202},{"krate":0,"index":213},{"krate":0,"index":212},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":" Serial Peripheral Interface\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65283,"byte_end":65293,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"FullDuplex","qualname":"::spi::FullDuplex","value":"FullDuplex<Word>","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Full duplex (master mode)","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65348,"byte_end":65353,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::spi::FullDuplex::Error","value":"type Error;","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" An enumeration of SPI errors\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65520,"byte_end":65524,"line_start":23,"line_end":23,"column_start":8,"column_end":12},"name":"read","qualname":"::spi::FullDuplex::read","value":"fn (&mut self) -> nb::Result<Word, Self::Error>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Reads the word stored in the shift register","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65612,"byte_end":65616,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"send","qualname":"::spi::FullDuplex::send","value":"fn (&mut self, word: Word) -> nb::Result<(), Self::Error>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Sends a word to the slave\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65791,"byte_end":65798,"line_start":33,"line_end":33,"column_start":5,"column_end":12},"name":"IdleLow","qualname":"::spi::Polarity::IdleLow","value":"Polarity::IdleLow","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Clock signal low when idle\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65840,"byte_end":65848,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"IdleHigh","qualname":"::spi::Polarity::IdleHigh","value":"Polarity::IdleHigh","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Clock signal high when idle\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":174},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65741,"byte_end":65749,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Polarity","qualname":"::spi::Polarity","value":"Polarity::{IdleLow, IdleHigh}","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177}],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65985,"byte_end":66009,"line_start":42,"line_end":42,"column_start":5,"column_end":29},"name":"CaptureOnFirstTransition","qualname":"::spi::Phase::CaptureOnFirstTransition","value":"Phase::CaptureOnFirstTransition","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the first clock transition\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66073,"byte_end":66098,"line_start":44,"line_end":44,"column_start":5,"column_end":30},"name":"CaptureOnSecondTransition","qualname":"::spi::Phase::CaptureOnSecondTransition","value":"Phase::CaptureOnSecondTransition","parent":{"krate":0,"index":188},"children":[],"decl_id":null,"docs":" Data in \"captured\" on the second clock transition\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":65916,"byte_end":65921,"line_start":40,"line_end":40,"column_start":10,"column_end":15},"name":"Phase","qualname":"::spi::Phase","value":"Phase::{CaptureOnFirstTransition, CaptureOnSecondTransition}","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":191}],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":202},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66165,"byte_end":66169,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"Mode","qualname":"::spi::Mode","value":"Mode { polarity, phase }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"decl_id":null,"docs":" SPI mode\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66203,"byte_end":66211,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"polarity","qualname":"::spi::Mode::polarity","value":"spi::Polarity","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Clock polarity\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":204},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66251,"byte_end":66256,"line_start":53,"line_end":53,"column_start":9,"column_end":14},"name":"phase","qualname":"::spi::Mode::phase","value":"spi::Phase","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Clock phase\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66312,"byte_end":66318,"line_start":57,"line_end":57,"column_start":11,"column_end":17},"name":"MODE_0","qualname":"::spi::MODE_0","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 0\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66459,"byte_end":66465,"line_start":63,"line_end":63,"column_start":11,"column_end":17},"name":"MODE_1","qualname":"::spi::MODE_1","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 0, CPHA = 1\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66607,"byte_end":66613,"line_start":69,"line_end":69,"column_start":11,"column_end":17},"name":"MODE_2","qualname":"::spi::MODE_2","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 0\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\spi.rs","byte_start":66755,"byte_end":66761,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"name":"MODE_3","qualname":"::spi::MODE_3","value":"Mode","parent":null,"children":[],"decl_id":null,"docs":" Helper for CPOL = 1, CPHA = 1\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"timer","qualname":"::timer","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" Timers\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":68280,"byte_end":68289,"line_start":60,"line_end":60,"column_start":11,"column_end":20},"name":"CountDown","qualname":"::timer::CountDown","value":"CountDown","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":161}],"decl_id":null,"docs":" A count down timer","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":68345,"byte_end":68349,"line_start":62,"line_end":62,"column_start":10,"column_end":14},"name":"Time","qualname":"::timer::CountDown::Time","value":"type Time;","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" The unit of time used by this timer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":68391,"byte_end":68396,"line_start":65,"line_end":65,"column_start":8,"column_end":13},"name":"start","qualname":"::timer::CountDown::start","value":"fn <T> (&mut self, count: T) -> ()","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Starts a new count down\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":68868,"byte_end":68872,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"wait","qualname":"::timer::CountDown::wait","value":"fn (&mut self) -> nb::Result<(), Void>","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Non-blockingly \"waits\" until the count down finishes","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":68979,"byte_end":68987,"line_start":81,"line_end":81,"column_start":11,"column_end":19},"name":"Periodic","qualname":"::timer::Periodic","value":"Periodic","parent":null,"children":[],"decl_id":null,"docs":" Marker trait that indicates that a timer is periodic\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":69039,"byte_end":69045,"line_start":84,"line_end":84,"column_start":11,"column_end":17},"name":"Cancel","qualname":"::timer::Cancel","value":"Cancel: CountDown","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" Trait for cancelable countdowns.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":69128,"byte_end":69133,"line_start":86,"line_end":86,"column_start":10,"column_end":15},"name":"Error","qualname":"::timer::Cancel::Error","value":"type Error;","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Error returned when a countdown can't be canceled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":69409,"byte_end":69415,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"cancel","qualname":"::timer::Cancel::cancel","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":163},"children":[],"decl_id":null,"docs":" Tries to cancel this countdown.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\watchdog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"watchdog","qualname":"::watchdog","value":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\watchdog.rs","parent":null,"children":[],"decl_id":null,"docs":" Traits for interactions with a processors watchdog timer.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":26684,"byte_end":26690,"line_start":894,"line_end":894,"column_start":11,"column_end":17},"name":"PwmPin","qualname":"::PwmPin","value":"PwmPin","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"decl_id":null,"docs":" A single PWM channel / pin","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":26901,"byte_end":26905,"line_start":899,"line_end":899,"column_start":10,"column_end":14},"name":"Duty","qualname":"::PwmPin::Duty","value":"type Duty;","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Type for the `duty` methods","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":26948,"byte_end":26955,"line_start":902,"line_end":902,"column_start":8,"column_end":15},"name":"disable","qualname":"::PwmPin::disable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Disables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":27008,"byte_end":27014,"line_start":905,"line_end":905,"column_start":8,"column_end":14},"name":"enable","qualname":"::PwmPin::enable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Enables a PWM `channel`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":27074,"byte_end":27082,"line_start":908,"line_end":908,"column_start":8,"column_end":16},"name":"get_duty","qualname":"::PwmPin::get_duty","value":"fn (&self) -> Self::Duty","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Returns the current duty cycle\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":27158,"byte_end":27170,"line_start":911,"line_end":911,"column_start":8,"column_end":20},"name":"get_max_duty","qualname":"::PwmPin::get_max_duty","value":"fn (&self) -> Self::Duty","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Returns the maximum duty cycle value\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":27231,"byte_end":27239,"line_start":914,"line_end":914,"column_start":8,"column_end":16},"name":"set_duty","qualname":"::PwmPin::set_duty","value":"fn (&mut self, duty: Self::Duty) -> ()","parent":{"krate":0,"index":167},"children":[],"decl_id":null,"docs":" Sets a new duty cycle\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":40192,"byte_end":40193,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41679,"byte_end":41680,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":42283,"byte_end":42284,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52499,"byte_end":52511,"line_start":15,"line_end":15,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52860,"byte_end":52872,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":53170,"byte_end":53182,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2_compat.rs","byte_start":58306,"byte_end":58307,"line_start":10,"line_end":10,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\fmt.rs","byte_start":61892,"byte_end":61897,"line_start":6,"line_end":6,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20616,"byte_end":20619,"line_start":693,"line_end":693,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20629,"byte_end":20637,"line_start":694,"line_end":694,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":33400,"byte_end":33405,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":33415,"byte_end":33418,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":15}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":33428,"byte_end":33431,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":33441,"byte_end":33447,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\mod.rs","byte_start":33457,"byte_end":33460,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":41}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20647,"byte_end":20654,"line_start":695,"line_end":695,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43577,"byte_end":43579,"line_start":9,"line_end":9,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":69}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43615,"byte_end":43617,"line_start":12,"line_end":12,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":73}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43709,"byte_end":43718,"line_start":16,"line_end":16,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":78}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\mod.rs","byte_start":43807,"byte_end":43816,"line_start":20,"line_end":20,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":97}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20664,"byte_end":20667,"line_start":696,"line_end":696,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20677,"byte_end":20684,"line_start":697,"line_end":697,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":115}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20694,"byte_end":20700,"line_start":698,"line_end":698,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":132}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20710,"byte_end":20713,"line_start":699,"line_end":699,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":143}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20723,"byte_end":20728,"line_start":700,"line_end":700,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":154}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\lib.rs","byte_start":20738,"byte_end":20746,"line_start":701,"line_end":701,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":166}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":40122,"byte_end":40127,"line_start":32,"line_end":32,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":138},"to":{"krate":0,"index":33}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\serial.rs","byte_start":40192,"byte_end":40193,"line_start":34,"line_end":34,"column_start":55,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":36},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41613,"byte_end":41623,"line_start":37,"line_end":37,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":145},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":41679,"byte_end":41680,"line_start":39,"line_end":39,"column_start":49,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":42}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":42220,"byte_end":42230,"line_start":60,"line_end":60,"column_start":34,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":145},"to":{"krate":0,"index":61}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\blocking\\spi.rs","byte_start":42283,"byte_end":42284,"line_start":62,"line_end":62,"column_start":46,"column_end":47},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":65},"to":{"krate":0,"index":47}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52499,"byte_end":52511,"line_start":15,"line_end":15,"column_start":13,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":81},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":52860,"byte_end":52872,"line_start":32,"line_end":32,"column_start":25,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":81},"to":{"krate":1,"index":2258}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v1_compat.rs","byte_start":53170,"byte_end":53182,"line_start":45,"line_end":45,"column_start":31,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":81},"to":{"krate":0,"index":70}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\digital\\v2_compat.rs","byte_start":58306,"byte_end":58307,"line_start":10,"line_end":10,"column_start":28,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":101},"to":{"krate":0,"index":74}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\fmt.rs","byte_start":61892,"byte_end":61897,"line_start":6,"line_end":6,"column_start":39,"column_end":44},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":138},"to":{"krate":1,"index":7602}},{"span":{"file_name":"C:\\Users\\Home\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\embedded-hal-0.2.3\\src\\timer.rs","byte_start":69048,"byte_end":69057,"line_start":84,"line_end":84,"column_start":20,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":157},"to":{"krate":0,"index":163}}]}